module test;

import test_suite;
import std.stdio;
import resources;

import disassembler;
import disassembler.util;

void main(string[] args) {
    writefln("Testing...");

    static if(false) {
        disassembleCode();
    } else {

        //auto filename = "test/test.exe";
        //auto filename = "bin-test.exe";
        auto filename = "test/test-avx.exe";

        auto pe = new PE(filename);

        auto code = pe.getCode();
        writefln("code length = %s", code.length);
        writefln("code base   = 0x%x", pe.getCodeBase());
        writefln("entry point = 0x%x", pe.getEntryPoint());

        auto entry = pe.getEntryPoint() - pe.getCodeBase();
        writefln("entry = 0x%x", entry);

        auto dis = new Disassembler();
        auto instructions = dis.processAll(code, 0, pe.getCodeBase());

        writefln("Instructions:");
        foreach(i; instructions) {
            //writefln("%s", i);
        }
        writefln("Add to the test suite:\n");
        foreach(i; instructions) {
            checkTestSuite(i);
        }

        auto page = new HTMLOutput(filename, "out.html");
        page.add(instructions);
        page.render();

        writefln("Finished");

        testing();
    }
}

void disassembleCode() {
    writefln("Disassembling...");

    ubyte[] code = [
        0x83, 0xec, 0x70, 0x33, 0xc0, 0x48, 0x8b, 0xea, 0x40, 0xb6, 0x01, 0x49, 0x89, 0x43, 0xb8, 0x49,
        0x8d, 0x53, 0xb8, 0x89, 0x74, 0x24, 0x30, 0x49, 0x89, 0x43, 0xc0, 0x4d, 0x8b, 0xf9, 0x49, 0x89,
        0x43, 0xc8, 0x49, 0x8b, 0xd8, 0x49, 0x89, 0x43, 0xa0, 0x4c, 0x8b, 0xe9, 0x49, 0x89, 0x43, 0xa8,
        0x49, 0x89, 0x43, 0xb0, 0xe8, 0xf3, 0x53, 0xff, 0xff, 0x84, 0xc0, 0x75, 0x09, 0x41, 0x83, 0xcc,
        0xff, 0xe9, 0x26, 0x02, 0x00, 0x00, 0x48, 0x8d, 0x54, 0x24, 0x38, 0x49, 0x8b, 0xcd, 0xe8, 0xd9,
        0x53, 0xff, 0xff, 0x84, 0xc0, 0x74, 0xe6, 0x4c, 0x8b, 0xcb, 0x4c, 0x8d, 0x44, 0x24, 0x38, 0x48,
        0x8d, 0x54, 0x24, 0x50, 0x49, 0x8b, 0xcd, 0xe8, 0x40, 0xa7, 0xfe, 0xff, 0x48, 0x8d, 0x44, 0x24,
        0x38, 0x48, 0x89, 0x5c, 0x24, 0x28, 0x4c, 0x8d, 0x4c, 0x24, 0x50, 0x48, 0x89, 0x44, 0x24, 0x20,
        0x4c, 0x8d, 0x05, 0x5d, 0x3e, 0x0b, 0x00, 0xba, 0x02, 0x00, 0x00, 0x00, 0x49, 0x8b, 0xcd, 0xe8,
        0x58, 0xa4, 0xfe, 0xff, 0x44, 0x8b, 0xe0, 0x85, 0xc0, 0x0f, 0x85, 0xcd, 0x01, 0x00, 0x00, 0x49,
        0x8b, 0x47, 0x28, 0x4c, 0x8d, 0x44, 0x24, 0x38, 0x45, 0x8b, 0x4f, 0x20, 0x48, 0x8d, 0x54, 0x24,
        0x50, 0x48, 0x89, 0x5c, 0x24, 0x28, 0x49, 0x8b, 0xcd, 0x48, 0x89, 0x44, 0x24, 0x20, 0xe8, 0xc9,
        0xab, 0xfe, 0xff, 0x44, 0x8b, 0xe0, 0x85, 0xc0, 0x0f, 0x85, 0x9e, 0x01, 0x00, 0x00, 0x4c, 0x89,
        0xb4, 0x24, 0xb0, 0x00, 0x00, 0x00, 0x44, 0x8b, 0xf0, 0x41, 0x39, 0x47, 0x30, 0x0f, 0x86, 0x81,
        0x01, 0x00, 0x00, 0x48, 0x89, 0xbc, 0x24, 0xa0, 0x00, 0x00, 0x00, 0x90, 0x49, 0x8b, 0x57, 0x38,
        0xb9, 0x00, 0x01, 0x00, 0x00, 0x41, 0x8b, 0xc6, 0x48, 0x8d, 0x3c, 0xc5, 0x00, 0x00, 0x00, 0x00,
        0x48, 0x8b, 0x14, 0x17, 0xe8, 0x33, 0xc7, 0xfb, 0xff, 0x85, 0xc0, 0x0f, 0x85, 0x2f, 0x01, 0x00,
        0x00, 0x49, 0x8b, 0xd5, 0x48, 0x8d, 0x0d, 0x79, 0x10, 0x0b, 0x00, 0xe8, 0xdc, 0x19, 0xfc, 0xff,
        0x48, 0x8b, 0xd8, 0x48, 0x85, 0xc0, 0x74, 0x1a, 0x48, 0x8b, 0xc8, 0xe8, 0x6c, 0xa4, 0xfb, 0xff,
        0x85, 0xc0, 0x40, 0x0f, 0xb6, 0xf6, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x45, 0xf0, 0x89, 0x74,
        0x24, 0x30, 0x49, 0x8b, 0xd5, 0x48, 0x8b, 0xcb, 0xe8, 0xcf, 0xf3, 0xfb, 0xff, 0x33, 0xdb, 0x40,
        0x84, 0xf6, 0x74, 0x7d, 0x4c, 0x8b, 0x05, 0x71, 0x0b, 0x0a, 0x00, 0x44, 0x8b, 0xcb, 0x4d, 0x85,
        0xc0, 0x74, 0x43, 0x49, 0x8b, 0x47, 0x38, 0x4c, 0x8b, 0x14, 0x07, 0x90, 0x49, 0x8b, 0xc2, 0x4d,
        0x2b, 0xc2, 0x66, 0x66, 0x0f, 0x1f, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb6, 0x10, 0x42,
        0x0f, 0xb6, 0x0c, 0x00, 0x2b, 0xd1, 0x75, 0x07, 0x48, 0xff, 0xc0, 0x85, 0xc9, 0x75, 0xed, 0x85,
        0xd2, 0x74, 0x3e, 0x41, 0xff, 0xc1, 0x48, 0x8d, 0x0d, 0x2f, 0x0b, 0x0a, 0x00, 0x4e, 0x8b, 0x04,
        0xc9, 0x4d, 0x85, 0xc0, 0x75, 0xc6, 0x4c, 0x8d, 0x0d, 0x5f, 0x46, 0x0b, 0x00, 0x49, 0x8b, 0x47,
        0x38, 0x45, 0x33, 0xc0, 0x41, 0x8b, 0xce, 0x41, 0x8d, 0x50, 0x08, 0x48, 0x8b, 0x0c, 0xc8, 0x48,
        0x89, 0x4c, 0x24, 0x20, 0x49, 0x8b, 0xcd, 0xe8, 0xc0, 0x51, 0xfb, 0xff, 0xe9, 0x85, 0x00, 0x00,
        0x00, 0x49, 0x8b, 0x77, 0x38, 0x48, 0x8b, 0xd5, 0x48, 0x03, 0xf7, 0x48, 0x8b, 0x0e, 0xe8, 0x79,
        0x9b, 0xfe, 0xff, 0x48, 0x85, 0xc0, 0x75, 0x3a, 0x48, 0x8b, 0x6c, 0x24, 0x48, 0x48, 0x8b, 0x7c,
        0x24, 0x40, 0x3b, 0xdf, 0x73, 0x3e, 0x8b, 0xc3, 0x48, 0x8d, 0x95, 0x38, 0x16, 0x00, 0x00, 0x48
    ];

    auto d = new Disassembler();
    auto instructions = d.processAll(code, 0, 0xcbaebce4);

    writefln("Instructions:");
    foreach(i; instructions) {
        //writefln("%s", i);
    }

}

align(16)
__gshared ulong mem, mem2;

void testing() {
    asm {
        push RAX;

        lea RAX, mem;
        vmovups XMM3, [RAX];
        vmovups YMM3, [RAX];

        pop RAX;
    }
}
